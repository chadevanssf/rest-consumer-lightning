//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are reserved words in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class ZipInfoClass {
	public static void consumeObject(JSONParser parser) {
		Integer depth = 0;
		do {
			JSONToken curr = parser.getCurrentToken();
			if (curr == JSONToken.START_OBJECT || 
				curr == JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == JSONToken.END_OBJECT ||
				curr == JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}

	public class Results {
		@AuraEnabled public String zip {get;set;} 
		@AuraEnabled public List<Cities> cities {get;set;} 
		@AuraEnabled public String county {get;set;} 
		@AuraEnabled public String state {get;set;} 
		@AuraEnabled public String country {get;set;} 
		@AuraEnabled public String area_code {get;set;} 
		@AuraEnabled public String fips {get;set;} 
		@AuraEnabled public String time_zone {get;set;} 
		@AuraEnabled public String daylight_savings {get;set;} 
		@AuraEnabled public String latitude {get;set;} 
		@AuraEnabled public String longitude {get;set;} 
		@AuraEnabled public String type_Z {get;set;} // in json: type
		@AuraEnabled public String population {get;set;} 

		public Results(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'zip') {
							zip = parser.getText();
						} else if (text == 'cities') {
							cities = new List<Cities>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								cities.add(new Cities(parser));
							}
						} else if (text == 'county') {
							county = parser.getText();
						} else if (text == 'state') {
							state = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'area_code') {
							area_code = parser.getText();
						} else if (text == 'fips') {
							fips = parser.getText();
						} else if (text == 'time_zone') {
							time_zone = parser.getText();
						} else if (text == 'daylight_savings') {
							daylight_savings = parser.getText();
						} else if (text == 'latitude') {
							latitude = parser.getText();
						} else if (text == 'longitude') {
							longitude = parser.getText();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'population') {
							population = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Results consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ZipInfo {
		public Results results {get;set;} 

		public ZipInfo(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'results') {
							results = new Results(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ZipInfo consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Cities {
		@AuraEnabled public String city {get;set;} 
		@AuraEnabled public String preferred {get;set;} 

		public Cities(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'city') {
							city = parser.getText();
						} else if (text == 'preferred') {
							preferred = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Cities consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static ZipInfo parse(String json) {
		return new ZipInfo(System.JSON.createParser(json));
	}
}